---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

const { slug, tags = [] } = Astro.props;

const setup = async () => {
  try {
    const allPosts = await getCollection('posts');

    console.log(allPosts);

    const posts = allPosts
      .filter(
        (post: CollectionEntry<'posts'>) =>
          post.slug !== slug &&
          post.data.tags?.filter((tag) => tags.includes(tag)).length > 0
      )
      .map((post: CollectionEntry<'posts'>) => ({
        ...post,
        sameTagCount:
          post.data.tags?.filter((tag) => tags.includes(tag)).length ?? 0,
      }))
      .sort((a, b) => {
        if (a.sameTagCount > b.sameTagCount) return -1;
        if (b.sameTagCount > a.sameTagCount) return 1;

        if (a.data.date > b.data.date) return -1;
        if (a.data.date < b.data.date) return 1;

        return 0;
      })
      .slice(0, 5);

    return { posts };
  } catch (error) {
    console.error('Error fetching or processing posts:', error);
    return { posts: [] }; // Return empty array in case of error
  }
};

const { posts } = await setup();
---

<div class="prose mt-5 p-5 rounded-lg max-w-none bg-gray-200">
  <h2 class="text-center">You might also like...</h2>
  {
    posts.length > 0 ? (
      posts.map((post) => (
        <div>
          <h3>{post.data.title}</h3>
          <p>{post.data.description}</p>
        </div>
      ))
    ) : (
      <p>No posts found.</p>
    )
  }
</div>
